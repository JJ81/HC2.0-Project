<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>colorIndex</key>
			<integer>5</integer>
			<key>database</key>
			<string>dev_holdemclub</string>
			<key>host</key>
			<string>dev-holdemclub.ccchnydnz10o.ap-northeast-2.rds.amazonaws.com</string>
			<key>kcid</key>
			<string>1068083525478395249</string>
			<key>name</key>
			<string>HOLDEMCLUB_DEV</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>devholdemclub</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortCol</key>
			<string>type</string>
			<key>contentSortColIsAsc</key>
			<false/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1611, 810}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>
select * from `recommend_channel` as rc
where rc.active = true
order by `priority` desc
limit 3;


select *
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.`active`=true
order by c.priority desc, c.title asc;


select c.channel_id, if(g.group_id is null, c.title , g.title) as title
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.`active`=true
group by g.group_id
order by c.priority desc, c.title asc;

select distinct(g.group_id), c.channel_id, if(g.group_id is null, c.title , g.title) as title
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.`active`=true
group by g.group_id 
order by c.priority desc, c.title asc;





select *
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.`active`=true
group by g.group_id
order by c.priority desc, c.title asc;


select count(*) as total, c.title, g.title, c.priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.`active`=true
group by g.group_id
order by c.priority desc, c.title asc;


select c.title, g.title, c.priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
order by c.priority desc, c.title asc;

select 
distinct(c.title) as channel_title, g.title as group_title, c.priority, g.group_id as group_id, c.channel_id as channel_id
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
order by c.priority desc, c.title asc;

# 모든 컨텐츠 가져오기
select 
distinct(c.title) as channel_title, g.title as group_title, c.priority, g.group_id as group_id, c.channel_id as channel_id
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
order by c.priority asc, g.priority asc, c.title asc; 

## 그룹간 순서를 지정할 수 있어야 한다.
## 만약 그룹과 채널간 경쟁이 있을 경우 어떻게 정렬을 해서 가져올 수 있는가?
# 모든 콘텐츠를 가져온 다음 이것들을 규칙을 정해서 정렬을 다시 한다.
# display_title, group_id, channel_id(,,,), group_title
# sub_channel이 있는 것과 없는 것을 구분할 수 있어야 한다.
# sub_channel의 경우 해당 채널 아래로 이동시킨다.

select 
g.group_id, group_concat(c.channel_id) as channel_id, 
c.title as channel_title,  g.title as group_title, 
c.priority as c_priority, g.priority as g_priority, count(c.`channel_id`) as sub_channel_count
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by g.group_id
order by c.priority desc, c.title asc;


select 
g.group_id, group_concat(c.channel_id) as channel_id, 
c.title as channel_title,  g.title as group_title, 
c.priority as c_priority, g.priority as g_priority, count(c.`channel_id`) as sub_channel_count
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by g.group_id
order by c.priority asc;

# 15개의 단독 채널과 그룹 채널이 출력되어야 한다. 순서는 priority asc이다.
select 
c.channel_id as channel_id, g.group_id as group_id, 
c.title as channel_title,  g.title as group_title, 
c.priority as c_priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by c.channel_id
order by c.priority asc;

# 단독 채널일 경우 sub ""
# 그룹 채널일 경우 sub에 title의 묶음과 channel_id의 묶음을 출력해보자.
# order로 출력한 것과는 다르게 group이 되고 있는 모습을 볼 수 있다. =&gt; 블로그로 포스팅할 것
## concat vs. group_concat vs. group_concat order by


select
c.channel_id as channel_id, if(g.group_id is null, c.title ,g.group_id) as group_id,
c.title as channel_title,  g.title as group_title, c.priority as c_priority, count(g.`group_id`) as total
,group_concat(c.`channel_id` order by c.priority asc) as group_channel
,group_concat(c.title order by c.priority asc) as group_channel_title
,group_concat(c.priority order by c.priority asc) as group_priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by group_id
order by c.priority asc;


select
#c.channel_id as channel_id, 
if(g.group_id is null, c.title ,g.group_id) as group_id,
#c.title as channel_title,  
#g.title as group_title, c.priority as c_priority, 
#count(g.`group_id`) as total,
if(count(g.`group_id`)=0,'single','group') as type
,group_concat(c.`channel_id` order by c.priority asc) as group_channel_id
,group_concat(c.title order by c.priority asc) as group_channel_title
,if(g.title is null, c.title, g.title) as title
#,group_concat(c.priority order by c.priority asc) as group_priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by group_id
order by c.priority asc;





select
#c.channel_id as channel_id, 
if(g.group_id is null, c.title ,g.group_id) as group_id,
#c.title as channel_title,  
#g.title as group_title, c.priority as c_priority, 
#count(g.`group_id`) as total,
if(count(g.`group_id`)=0,'single','group') as type
,group_concat(c.`channel_id` order by c.priority asc) as group_channel_id
,group_concat(c.title order by c.priority asc) as group_channel_title
,if(g.title is null, c.title, g.title) as title
#,group_concat(c.priority order by c.priority asc) as group_priority
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by group_id
order by c.priority asc;


select
if(g.title is null, c.title, g.title) as title,
if(count(g.`group_id`)=0,'single','group') as type,
group_concat(c.`channel_id` order by c.priority asc) as group_channel_id,
group_concat(c.title order by c.priority asc) as group_channel_title,
if(g.group_id is null, c.title ,g.group_id) as group_id
from `channel` as c
left join `group` as g
on c.group_id = g.group_id
where c.active=true
group by group_id
order by c.priority asc;


# 추천채널과 채널 테이블을 연결함. ==&gt; 리얼에 반영할 것.
alter table `recommend_channel`
add foreign key (`channel_id`)
references `channel`(`channel_id`);

###################################
###################################
######### 여기서부터 v2.0 ############
###################################
###################################
create table `broadcast`(
	id bigint not null auto_increment,
	date datetime default CURRENT_TIMESTAMP,
	status boolean default true,
	link varchar(255) character set utf8 default null,
	primary key(`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;

alter table `broadcast` drop column `end_dt`;
alter table `broadcast` add column `end_dt` datetime default null after `date`;

alter table `broadcast` drop column `date`;
alter table `broadcast` add column `start_dt` datetime default CURRENT_TIMESTAMP after `id`;



# insert into `broadcast` (`link`) values('');
## 쿼리로 한방에 해결하는 방법을 찾아보자.

insert into `broadcast` ('link')
select link
where date(`date`) = CURDATE();




select `id`, `date`, `link`, `status` from `broadcast`
where date(`date`) = curdate();

insert into `broadcast` (`link`) values('http://www.google.com');

select * from `broadcast` where date(`date`) = curdate();

# 이건 문법에 문제가 있다고 출력된다.
IF EXISTS (select * from `broadcast`)
BEGIN
print 'no rows'
END;

## 아래와 같은 방법도 사용하지 못한다. 
select * from `broadcast` where date(`date`) = curdate();
if @@rowcount=0
begin
print '0'
end;


## select ifnull을 통해서 실행해본다.
#select ifnull( (select `status` from `broadcast` where date(`date`) = curdate()), 0) as result;

##;
## 아래 코드도 실행이 되지 않는다. 문제는 버전에 있는 것인지 아니면 문법에 있는 것인지...
if not exists ( select * from `broadcast` where date(`date`) = curdate() )
then insert into `broadcast` (`link`) values('http://www.google.com')
else update `broadcast` set `status`=false where date(`date`) = curdate()
end if;


/* DROP PROCEDURE `GetFlavour`
CREATE PROCEDURE `GetFlavour`(`FlavourID` INT, `FlavourName` VARCHAR(20))
begin
if not exists ( select * from `broadcast` where date(`date`) = curdate() )
then insert into `broadcast` (`link`) values('http://www.google.com')
else update `broadcast` set `status`=false where date(`date`) = curdate()
end if
end; */

######

select * if(
	exists( select * from `broadcast` where date(`date`) = curdate() ) is null,
	'true',
	'false'
) from `broadcast`;


## 중복일 경우 업데이트를 치는 구문이 있다.
insert into `broadcast` (`link`) values('http://www.google.com')
on duplicate key update `status`=false where date(`date`)=curdate();

## 같은 날 한 번 이상 방송을 할 경우
## insert의 조건, 어떤 것도 방송중이지 않아야 한다.
## 가장 최근에 한 개에 대해서 방송중 여부를 판단한다.


# 최근 방송 여부를 판단하고 방송을 정상적으로 종료를 하지 않은 상태에서는 방송중이라는 신호가 이어진다.
## 현재 방송중인지의 여부를 판단한다. (백오피스와 클라이언트사이드 모두 사용)
select * from `broadcast` 
order by `date` desc
limit 1;

# 방송중일 경우 반드시 해당 아이디를 통해서 방송중인 레코드에 상태값을 update하게 된다
## 만약 하루동안 방송중이라고 켜놓고 다음날에 이어서 방송을 할 경우는 이틀연속 쉬지 않고 방송으르 한 것으로 판단하게 된다.
## 방송중 여부는 항상 최신 레코드를 기준으로 판단하게 된다.
## 방송중일 경우 버튼에 해당 아이디가 있을 것이고 
## 방송중이지 않을 경우 버튼에는 해당 아이디가 없을 것이다.
## 방송중일 경우, 버튼을 누르면 레코드에 update를 하게 되고 with id
## 방송중이지 않을 경우, 새로운 레코드를 insert하게 되고 페이지를 릴로드되면서 버튼에 id를 가지고 있는 방송중 상태가 될 것이다.


select * from `broadcast` 
order by `start_dt` desc limit 1;

### channel ####
select * from `channel`;
alter table `channel` add column `type` enum('G', 'S', 'U') default 'G' after `title`; ## General, Special, Under


# 모든 채널 가져오기
select * from `channel`
order by `priority` desc;


## 대표 채널 가져오기
select * from `channel`
where `type` != 'U'
order by `priority` desc; ## U, S타입인 경우만 group_id를 같는다, G일 경우 단독 채널이다.


create table `channel_group` (
	`id` bigint not null auto_increment,
	`group_id` varchar(255) character set utf8 not null,
	`channel` varchar(255) character set utf8 not null,
	primary key(`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;


## 데이터가 정상적으로 생성이 된 이후에 참조키를 걸어서 연결할 것!!


select * from `channel`
where group_id is not null;

## 기존 채널과 그룹을 유지하면서 안정적으로 릴리즈하기 위해서 새로운 테이블을 만들어서 진행해보자.

create table `channel_new` (
	`channel_id` varchar(255) character set utf8 not null,
	`title` varchar(255) character set utf8 not null,
	`type` enum('S','G','U') default 'G' comment 'Special(대표채널), General(단독채널), Under(S채널에 종속)',
	`description` text default null,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	`priority` bigint unsigned default null,
	`group_id` varchar(255) character set utf8 default null,
	`hit_count` bigint default 0,
	`active` boolean default true, 
	unique key(`channel_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;



## 시나리오 대로 실행을 해본다.
# 1. 처음부터 대표 채널을 등록한다.
select * from `channel_new`;
insert into `channel_new` (`channel_id`,`title`, `type`) 
values('08b75690-6d90-11e6-8ac2-b7031c24f9d2', '네임드 쇼다운 라이브', 'S');

# 2. 대표 채널에 속하는 서브 채널을 생성한다.
insert into `channel_new` (`channel_id`,`title`, `type`)
values('385bc900-90f7-11e6-876f-719554daeebf', '네임드 쇼다운 라이브 시즌1', 'U');

select * from `channel_group`;



select cn.*
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id
where cn.type != 'U';

select cn.*
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id;


select DISTINCT cn.*, cg.group_id, cg.channel_id from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id
where cn.type !='U';

select * from `channel_new`;



# channel_new와 channel과 channel_group의 channel을 연결한다.
alter table `channel_group`
add foreign key (`channel_id`)
references `channel_new`(`channel_id`);


## 우선 순위에 맞게 서브 채널을 제외한 모든 채널을 가져온다.
select * from `channel_new`
where `type` != 'U'
order by `priority` desc;


# 그룹 채널을 가져온다.
select * from `channel_group`;

# line 126번 참고


##;
select cn.*, cg.group_id, cg.channel_id from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id
where cn.type !='U';


# 그룹별로 채널을 묶는다.
select group_id, group_concat(`channel_id`) as channels
from `channel_group`
group by `group_id`;


select cn.*, cg.group_id, cg.channels from `channel_new` as cn
left join (
	select group_id, group_concat(`channel_id`) as channels
	from `channel_group`
	group by `group_id`
) as cg
on cn.group_id = cg.group_id
where cn.type !='U' and cn.active=true
order by cn.priority desc;

# line 181 참고

## channels 순서를 기준으로 우측열에 타이틀을 넣어보자.
select group_id, group_concat(`channel_id`) as channels
from `channel_group`
group by `group_id`;

# 서브 채널만 가져온다.
select `channel_id`, `title` from `channel_new`
where `type` = 'U';

select t.* from 
(
	select group_id, group_concat(`channel_id`) as channels
	from `channel_group`
	group by `group_id`
) as t;


select group_concat(`channel_id`) as channels
from `channel_group`
group by `group_id`;
	
	
/* select * from `channel_new`
where `channel_id` in 
(
	select group_concat(`channel_id`) as channels
	from `channel_group`
	group by `group_id`
); */

;
select * from `channel_new` as cn
inner join (
	select group_concat(`channel_id`) as channels
	from `channel_group`
	group by `group_id`
) as cg
on cn.channel_id = cg.channels;


select * from `channel_group` as cg
where cg.channel_id in (
	select group_concat(`channel_id`) as channels
	from `channel_group`
	group by `group_id`
);


## 
select if(cn.group_id is null, cn.title, cn.group_id) as group_id, group_concat(`cn`.`channel_id`) as channels, group_concat(`cn`.`title`) as titles
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id
group by cg.group_id;


select cn.*, cg.*
from `channel_new` as cn
left join (
	select group_concat(`channel_id`) as channels, group_id
	from `channel_group`
	group by `group_id`
) as cg
on cn.group_id = cg.channels;

select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id;


select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, group_concat(if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id)
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id
group by cg.group_id;


select * from `channel_new`;

select * 
from `channel_new` as cn
inner join `channel_new` cn2
;

select group_id, group_concat(`channel_id`) as channels
from `channel_group`
group by `group_id`;


select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
from `channel_new` as cn
left join `channel_group` as cg
on cn.group_id = cg.group_id;


select ch.*, cn.title from 
`channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id;



select ch.channel as super_channel, ch.title as super_title, ch.type, ch.priority, ch.group_id, ch.channel_id as sub_channel, cn.title as sub_title from 
`channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id;




select * from channel_new;


select ch.channel as super_channel, ch.title as super_title, ch.type, ch.priority, ch.group_id, group_concat(ch.channel_id) as sub_channel, group_concat(cn.title) as sub_title from 
`channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id
where ch.type != 'U'
group by ch.group_id;

##########################################################
################# 좌측 채널을 순서대로 가져오는 쿼리 ################
##########################################################
select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title, ch.priority
from `channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id
where ch.type != 'U'
group by ch.group_id
order by ch.priority desc;



select * from `broadcast` order by `start_dt` desc limit 1;



# 최근 업데이트 비디오를 3개를 가져온다.
# 최근 업데이트된 채널의 비디오를 {N}개 가져온다.


select * from `video`
order by `created_dt` desc
limit 0, 3;


select * from `broadcast` order by `start_dt` desc limit 1;


## 추천 방송 {N}개 가져오기
drop table `content_recommend`;
create table `content_recommend` (
	`id` bigint unsigned not null auto_increment,
	`channel_id` varchar(255) character set utf8 not null,
	`priority` bigint unsigned default null comment '추천 콘텐츠 간 우선순위',
	`registered_dt` datetime default CURRENT_TIMESTAMP comment '추천 콘텐츠 등록일',
	primary key(`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;

alter table `content_recommend`
add foreign key (`channel_id`)
references `channel_new`(`channel_id`);

select * from `content_recommend`
order by `priority` desc, `registered_dt` desc;

select channel_id from `content_recommend`
order by `priority` desc, `registered_dt` desc;

select group_concat(channel_id order by `priority` desc, `registered_dt` desc) as channel from `content_recommend`;



select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
from `channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id
where ch.type != 'U' 
group by ch.group_id
order by ch.priority desc;

## 추천 콘텐츠 가져오기
select channels.*, cr.priority as recom_priority 
from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
from `channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id
where ch.type != 'U' 
group by ch.group_id
) as channels
inner join `content_recommend` as cr
on channels.super_channel = cr.channel_id
order by cr.priority desc;


### 이벤트 결과 관련 테이블, 이벤트 결과를 이미지 업로드 하여 출력한다.
drop table `event_result`;
create table `event_result` (
	`id` bigint not null auto_increment,
	`event_id` bigint not null,
	`result_img` varchar(255) character set utf8 not null,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	primary key(`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;

alter table `event_result`
add foreign key (`event_id`)
references `event`(`id`);

drop table `event`;
create table `event` (
	`id` bigint not null auto_increment,
	`title` varchar(255) character set utf8 not null,
	`description` text character set utf8 default null,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	primary key(`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=COMPACT;


## 이벤트 리스트 가져오기
select * from `event`
order by `created_dt` desc
limit 0, 10;

## 이벤트 결과 가져오기
select * from `event_result`
where `event_id`=3;

alter table `event` add column `thumbnail` varchar(255) character set utf8 not null after `title`;

alter table `event` add column `status` enum('C', 'P', 'N') not null comment 'Completed, Progress, Not Yet' after `thumbnail`;


## 이벤트를 생성할 경우 테이블 처리
alter table `event` add column `type` enum('V') default 'V' comment 'Vote' after `thumbnail`;
alter table `event` add column `ref_id` bigint default null comment 'type에 따른 참조 id' after `type`;

select * from `vote_question`
where `id`=14;

select * from `vote_answer`
where vote_id=14;

# type이 G 혹은 U인 채널 아이디로 비디오 리스트를 가져온다.
select * from `video`
where `channel_id`='385bc900-90f7-11e6-876f-719554daeebf';


select * from `channel_new`
where channel_id=?;



# 홀클 대표 콘텐츠, 교육 콘텐츠, 기타 콘텐츠
create table `contents` (
	`id` bigint not null auto_increment,
	`video_id` varchar(255) character set utf8 not null,
	`type` enum('R', 'E', 'S') default 'E',
	`created_dt` datetime default CURRENT_TIMESTAMP,
	`priority` bigint default null,
	`active` boolean default true,
	primary key(`id`)
) engine=Innodb default charset=utf8mb4 collate=utf8mb4_bin row_format=COMPACT;

alter table `contents`
add foreign key (`video_id`)
references `video`(`video_id`);



# 홀클 대표 콘텐츠
select * from `contents`
where `type`='R'
order by `priority` desc
limit 0,10;


# 교육 콘텐츠
select * from `contents`
where `type`='E'
order by `priority` desc
limit 0,10;

# 요약 콘텐츠
select * from `contents`
where `type`='S'
order by `priority` desc
limit 0,10;



## 추천 채널 가져오기 수정본
# contents에서 추천만 가져온다. ref_id as channel_id로 변경한다.
select * from `contents`
where `type`='R'
order by `priority` desc, `created_dt` desc;


select channels.*, cr.priority as recom_priority 
from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
from `channel_new` as cn
inner join (
	select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
	from `channel_new` as cn
	left join `channel_group` as cg
	on cn.group_id = cg.group_id
) as ch
on ch.channel_id = cn.channel_id
where ch.type != 'U' 
group by ch.group_id
) as channels
inner join (
	select * from `contents`
	where `type`='R'
	order by `priority` desc, `created_dt` desc
) as cr
on channels.super_channel = cr.ref_id
order by cr.priority desc;


## contents 테이블에 통합됨
drop table `content_recommend`;


## 비디오 뷰 관련
# 비디오 관련 정보 얻어오기
# 선택한 비디오에 대한 정보 가져오기
select * from `video`
where `video_id`='c8f11df0-9113-11e6-876f-719554daeebf';

# 원하는 채널의 비디오 리스트를 모두 가져오기
select * from `video`
where `channel_id`='7c75b340-6d92-11e6-9f3b-212917332ccd'
order by `created_dt` asc;


select * from `event_result`
where `event_id`=3;



# news 제공
# 항상 4개만 활성화될 수 있도록 해야 한다.
create table `news` (
	`id` bigint not null auto_increment,
	`created_dt` datetime default CURRENT_TIMESTAMP,
	`title` varchar(255) character set utf8 not null comment '뉴스 제목',
	`sub_title` varchar(255) character set utf8 not null comment '뉴스 소제목',
	`desc` varchar(255) character set utf8 not null comment '뉴스에 대한 간략한 설명',
	`contents` text character set utf8 default null comment '뉴스 전체 내용',
	`active` boolean default false,
	primary key(`id`)
) engine=Innodb default charset=utf8mb4 collate=utf8mb4_bin row_format=COMPACT;

# 각 글의 계층을 설정한다. (다층구조 댓글 시스템)
alter table `reply_video` add column `layer` int(5) default null after `comment_id`;



alter table `reply_video` add column `user_id` varchar(255) character set utf8 not null after `created_dt`;

alter table `reply_video`
add foreign key (`user_id`)
references `user`(`user_id`);


# nickname allow null 처리할 것.!! nickname에 걸려 있는 인덱스를 끊어줄 것.

##### reply_video에서 nickname 참조를 끊고 user_id를 추가한다.
## 기존에 nickname으로 출력된 것들을 유지된다.
## 다만 user테이블을 참조하여 각 글에 대한 user의 nickname을 출력할 수 있도록 한다..
## nickname은 이후에 바뀔 수도 있으며 현재 한글로도 입력이 되고 있으므로 문제가 생겨날 소지가 크다.

show index from `reply_video`;
alter table `reply_video` drop index `nickname`;
alter table `reply_video` add index `user_id`;

insert into `reply_video` (`video_id`, `user_id`, `comment`) values(?,?,?);

## 기존 리얼 디비 데이터에 댓글에 대한 nickname에 일치하는 user_id를 모두 입력할 수 있도록 한다. 



select * from `user`
where `user_id` like 'player%';

# plr001 ~ plr001 / $2a$10$cqGXmkeUv7dOi7WkAp6rNeGUa6utkKE5PZtiIKNUl6n2oH4ug8jp2

/* DELIMITER $$
DROP PROCEDURE IF EXISTS FILL_TEST_ACCOUNT$$
CREATE PROCEDURE FILL_TEST_ACCOUNT()
BEGIN
	DECLARE i INT DEFAULT 1;
	WHILE i &lt;= 999 DO
		INSERT INTO `user` (`user_id`, `market_code`, `password`, `nickname`) VALUES (concat('plr',  i), 'DEV_TEST', '$2a$10$cqGXmkeUv7dOi7WkAp6rNeGUa6utkKE5PZtiIKNUl6n2oH4ug8jp2', concat('plr',  i));
		SET i = i + 1;
	END WHILE;
END$$ */

#call FILL_TEST_ACCOUNT();

select count(*) from `user`
where `user_id` like 'plr%';

select * from `user`
where `user_id` like 'plr%';

select * from `user`
where `user_id` like 'player%';


select `user_id`, `password`, `nickname`, `name`, `email`, `login_fail_count`, `banned`, `market_code` from `user` where `user_id`='plr3';




select * from `user` where `user_id`='plr1';


# 댓글 지우기
delete from `reply_video`
where `id`='265' and `user_id`='player001';


## 여기서부터 덧글
## 덧글의 계층에 따라서 layer 혹은 level정보를 입력해야 한다.
### 댓글은 가장 최상위 계층이다. 덧글은 layer가 1부터 시작한다. 
### 특정 덧글에 대한 덧글을 달기 위해서는 상위 덧글의 레이어 혹은 레벨을 알고 있어야 한다.

select * from `reply_video`;



### 아래 쿼리 수정이 필요함. 추천 콘텐츠를 가져오는 쿼리 로직 // contents 테이블이 변경되었음...

select channels.*, cr.priority as recom_priority from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
		from `channel_new` as cn
		inner join (
			select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
		from `channel_new` as cn
		left join `channel_group` as cg
		on cn.group_id = cg.group_id
		) as ch
		on ch.channel_id = cn.channel_id
		where ch.type != 'U'
		group by ch.group_id) as channels
		inner join
		(select * from `contents`
		where `type`='R'
		order by `priority` desc, `created_dt` desc) as cr
		on channels.super_channel = cr.channel_id
		order by cr.priority desc;


# 최신업데이트 비디오 가져오기
select * from `video`
where active=true
order by `priority` desc, `created_dt` desc
limit 0, 4;


# 대표 콘텐츠 가져오기
select * from `contents`
where `type`='RT'
order by `priority` desc, `created_dt` desc
limit 0,4;


select * from `contents` as cs
inner join `channel` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0, 4;


# 포커 교육 콘텐츠 가져오기
select * from `contents`
where `type`='E'
order by `priority` desc, `created_dt` desc
limit 0, 4;











</string>
			<key>table</key>
			<string>contents</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>225</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string># 포커 교육 콘텐츠 가져오기
select * from `contents`
where `type`='E'
order by `priority` desc, `created_dt` desc
limit 0, 4</string>
		<string>select * from `contents` as cs
inner join `channel` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0, 4</string>
		<string>select * from `contents` as cs
inner join `channel` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `channel` as c # 임시로 channel_group 대신 channel테이블 정보를 참조하기로 한다.
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string># 대표 콘텐츠 가져오기
select * from `contents`
where `type`='RT'
order by `priority` desc, `created_dt` desc
limit 0,4</string>
		<string>select distinct * from `contents` as cs
inner join `video` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `video` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT' and cs.active=true
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `video` as c
on cs.channel_id = c.channel_id
where cs.`type`='RT'
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `channel` as c # 임시로 channel_group 대신 channel테이블 정보를 참조하기로 한다.
on cs.channel_id = c.channel_id
where cs.`type`='RT'
order by cs.priority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `channel` as c # 임시로 channel_group 대신 channel테이블 정보를 참조하기로 한다.
on cs.channel_id = c.channel_id
where cs.`type`='RT'
order by cs.apriority desc, cs.created_dt desc
limit 0,4</string>
		<string>select * from `contents` as cs
inner join `channel` as c # 임시로 channel_group 대신 channel테이블 정보를 참조하기로 한다.
on cs.channel_id = c.channel_id
where cs.`type`='RT'
order by cs.apriority` desc, cs.`created_dt` desc
limit 0,4;</string>
		<string>select * from `contents` as cs
inner join `channel` as c # 임시로 channel_group 대신 channel테이블 정보를 참조하기로 한다.
on cs.channel_id = c.channel_id
where `type`='RT'
order by `priority` desc, `created_dt` desc
limit 0,4</string>
		<string>select * from `video`
where active=true
order by `priority` desc, `created_dt` desc
limit 0, 4</string>
		<string>select * from `video`
order by `priority` desc, `created_dt` desc
limit 0, 4</string>
		<string>select * from `video`
order by `priority` desc, `created_dt` desc
#limit 0, 4;</string>
		<string>select * from `video`
order by `priority` desc, `created_dt` desc
limit ?, ?</string>
		<string>### 아래 쿼리 수정이 필요함. 추천 콘텐츠를 가져오는 쿼리 로직 // contents 테이블이 변경되었음...

select channels.*, cr.priority as recom_priority from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
		from `channel_new` as cn
		inner join (
			select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
		from `channel_new` as cn
		left join `channel_group` as cg
		on cn.group_id = cg.group_id
		) as ch
		on ch.channel_id = cn.channel_id
		where ch.type != 'U'
		group by ch.group_id) as channels
		inner join
		(select * from `contents`
		where `type`='R'
		order by `priority` desc, `created_dt` desc) as cr
		on channels.super_channel = cr.channel_id
		order by cr.priority desc</string>
		<string>### 아래 쿼리 수정이 필요함. 추천 콘텐츠를 가져오는 쿼리 로직 // contents 테이블이 변경되었음...

select channels.*, cr.priority as recom_priority from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
		from `channel_new` as cn
		inner join (
			select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
		from `channel_new` as cn
		left join `channel_group` as cg
		on cn.group_id = cg.group_id
		) as ch
		on ch.channel_id = cn.channel_id
		where ch.type != 'U'
		group by ch.group_id) as channels
		inner join
		(select * from `contents`
		where `type`='R'
		order by `priority` desc, `created_dt` desc)
		 as cr
		on channels.super_channel = cr.ref_id
		order by cr.priority desc</string>
		<string>###




select channels.*, cr.priority as recom_priority from
(select ch.channel as super_channel, ch.title as super_title, ch.type, group_concat(ch.channel_id order by ch.priority desc) as sub_channel, group_concat(cn.title order by ch.priority desc) as sub_title
		from `channel_new` as cn
		inner join (
			select cn.channel_id as channel, cn.title, cn.type, cn.description, cn.created_dt, cn.priority, cn.active, if(cg.group_id is null, cn.title, cg.group_id) as group_id, if(cg.channel_id is null, cn.channel_id, cg.channel_id) as channel_id
		from `channel_new` as cn
		left join `channel_group` as cg
		on cn.group_id = cg.group_id
		) as ch
		on ch.channel_id = cn.channel_id
		where ch.type != 'U'
		group by ch.group_id) as channels
		inner join
		(select * from `contents`
		where `type`='R'
		order by `priority` desc, `created_dt` desc)
		 as cr
		on channels.super_channel = cr.ref_id
		order by cr.priority desc</string>
		<string>select * from `user` 
where user_id='plr123'</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.6.27-log</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
